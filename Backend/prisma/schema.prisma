generator client {
  provider             = "prisma-client-py"   // ใช้สร้าง Prisma client ด้วย Python
  interface            = "asyncio"            // ใช้ async interface สำหรับการเชื่อมต่อแบบ asynchronous
  recursive_type_depth = 5                    // กำหนดความลึกสูงสุดของ recursive types ใน client
}

datasource db {
  provider = "postgresql"                      // ใช้ฐานข้อมูล PostgreSQL
  url      = env("DATABASE_URL")              // เชื่อมต่อกับฐานข้อมูลผ่าน environment variable DATABASE_URL
}

model roles {
  roles_id    String          @id @default(uuid()) @db.Uuid  // รหัสบทบาท (Primary Key) แบบ UUID อัตโนมัติ
  name        String          @unique                       // ชื่อบทบาท เช่น admin, user (ต้องไม่ซ้ำกัน)
  description String?                                         // คำอธิบายบทบาท (ไม่บังคับ)

  users       users[]                                         // ความสัมพันธ์แบบ one-to-many กับ users (ผู้ใช้ที่มีบทบาทนี้)
  role_menus  role_menus[]                                   // ความสัมพันธ์กับ role_menus เพื่อกำหนดสิทธิ์เมนู
  role_menu_items role_menu_items[]                           // ความสัมพันธ์กับ role_menu_items เพื่อกำหนดสิทธิ์เมนูย่อย
}

model users {
  users_id     String    @id @default(uuid()) @db.Uuid       // รหัสผู้ใช้ (Primary Key) แบบ UUID
  username     String    @unique                             // ชื่อผู้ใช้ (login) ต้องไม่ซ้ำกัน
  password_hash String                                       // รหัสผ่านที่ถูกเข้ารหัส
  full_name    String?                                        // ชื่อเต็มของผู้ใช้ (ไม่บังคับ)
  email        String?                                        // อีเมล (ไม่บังคับ)
  user_enabled Boolean   @default(true)                      // สถานะผู้ใช้ เปิด/ปิด ใช้งาน
  roles_id     String    @db.Uuid                             // รหัสบทบาทผู้ใช้ (Foreign Key)
  created_at   DateTime  @default(now())                      // วันที่สร้างบัญชี
  updated_at   DateTime  @default(now())                      // วันที่อัปเดตบัญชีล่าสุด
  roles        roles     @relation(fields: [roles_id], references: [roles_id])  // ความสัมพันธ์กับ roles

  domains_created domains[] @relation("domainsCreated")       // รายการ domain ที่ผู้ใช้สร้าง
  domains_updated domains[] @relation("domainsUpdated")       // รายการ domain ที่ผู้ใช้แก้ไขล่าสุด
  domains_managed domains[] @relation("domainsManaged")       // รายการ domain ที่ผู้ใช้จัดการ
}
model domains {
  domains_id    String   @id @default(uuid()) @db.Uuid          // รหัส domain
  manager_id    String?  @db.Uuid                              // ✅ เปลี่ยนเป็น optional เพื่อรองรับการ SetNull
  domain_name   String   @unique                               // ชื่อ domain ต้องไม่ซ้ำ
  enable        Boolean  @default(true)                        // เปิด/ปิดใช้งาน domain
  created_at    DateTime @default(now())                       // วันที่สร้าง
  created_by    String?  @db.Uuid                              // ผู้ใช้ที่สร้าง
  updated_at    DateTime @default(now())                       // วันที่อัปเดตล่าสุด
  updated_by    String?  @db.Uuid                              // ผู้ใช้ที่แก้ไขล่าสุด
  
  extensions    extensions[]                                   // รายการ extension
  contacts      contacts[]                                     // รายการ contact
  trunks        trunks[]                                       // รายการ trunk
  groups        group_extensions[]                             // รายการกลุ่ม
  creator       users?  @relation("domainsCreated", fields: [created_by], references: [users_id], onDelete: SetNull)
  updater       users?  @relation("domainsUpdated", fields: [updated_by], references: [users_id], onDelete: SetNull)
  manager       users?  @relation("domainsManaged", fields: [manager_id], references: [users_id], onDelete: SetNull)
}
model menu_headers {
  menu_headers_id String        @id @default(uuid()) @db.Uuid  // รหัสเมนูหลัก (Primary Key)
  name_default    String                                    // ชื่อเมนูหลักภาษาเริ่มต้น
  name_custom     String?                                   // ชื่อเมนูหลักแบบกำหนดเอง (ไม่บังคับ)
  icon            String?                                   // ไอคอนเมนู (ไม่บังคับ)
  order_index     Int           @default(0)                 // ลำดับการแสดงเมนู
  is_active       Boolean       @default(true)              // สถานะเมนู เปิด/ปิดใช้งาน
  created_at      DateTime      @default(now())             // วันที่สร้างเมนู
  updated_at      DateTime      @default(now())             // วันที่อัปเดตเมนูล่าสุด

  menu_items     menu_items[]                                // เมนูย่อย (relation)
  role_menus     role_menus[]                                // กำหนดสิทธิ์ role กับเมนูหลัก
}

model menu_items {
  menu_items_id  String      @id @default(uuid()) @db.Uuid   // รหัสเมนูย่อย (Primary Key)
  menu_headers_id String     @db.Uuid                        // รหัสเมนูหลัก (Foreign Key)
  name_default   String                                    // ชื่อเมนูย่อยภาษาเริ่มต้น
  name_custom    String?                                   // ชื่อเมนูย่อยแบบกำหนดเอง (ไม่บังคับ)
  path           String?                                   // URL หรือ path ของเมนูย่อย
  icon           String?                                   // ไอคอนเมนูย่อย (ไม่บังคับ)
  order_index    Int         @default(0)                   // ลำดับการแสดงเมนูย่อย
  is_active      Boolean     @default(true)                // สถานะเมนูย่อย เปิด/ปิดใช้งาน
  created_at     DateTime    @default(now())               // วันที่สร้างเมนูย่อย
  updated_at     DateTime    @default(now())               // วันที่อัปเดตเมนูย่อยล่าสุด

  menu_header    menu_headers @relation(fields: [menu_headers_id], references: [menu_headers_id], onDelete: Cascade)  // ความสัมพันธ์กับเมนูหลัก
  role_menu_items role_menu_items[]                        // กำหนดสิทธิ์ role กับเมนูย่อย
}

model role_menus {
  roles_id       String      @db.Uuid                       // รหัสบทบาท (Foreign Key)
  menu_headers_id String     @db.Uuid                       // รหัสเมนูหลัก (Foreign Key)

  roles         roles       @relation(fields: [roles_id], references: [roles_id], onDelete: Cascade)          // ความสัมพันธ์กับ roles
  menu_header   menu_headers @relation(fields: [menu_headers_id], references: [menu_headers_id], onDelete: Cascade)  // ความสัมพันธ์กับเมนูหลัก

  @@id([roles_id, menu_headers_id])                       // กำหนด composite primary key
}

model role_menu_items {
  roles_id      String      @db.Uuid                       // รหัสบทบาท (Foreign Key)
  menu_items_id String      @db.Uuid                       // รหัสเมนูย่อย (Foreign Key)

  roles        roles       @relation(fields: [roles_id], references: [roles_id], onDelete: Cascade)          // ความสัมพันธ์กับ roles
  menu_item    menu_items  @relation(fields: [menu_items_id], references: [menu_items_id], onDelete: Cascade)  // ความสัมพันธ์กับเมนูย่อย

  @@id([roles_id, menu_items_id])                         // กำหนด composite primary key
}

model extensions {
  extension_id      String   @id @default(uuid()) @db.Uuid      // รหัส extension
  domain_id         String   @db.Uuid                           // รหัส domain
  group_id          String?  @db.Uuid                           // ✅ รหัสกลุ่ม (nullable กรณียังไม่มีกลุ่ม)
  user_id           String?  @db.Uuid
  extension_number  String                                      // หมายเลข extension เช่น 100, 101
  voicemail_enabled Boolean  @default(false)
  is_active         Boolean  @default(true)
  call_forwarding   String?
  description       String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  domain            domains           @relation(fields: [domain_id], references: [domains_id], onDelete: Cascade)
  group             group_extensions? @relation(fields: [group_id], references: [group_id], onDelete: SetNull) // ✅ ความสัมพันธ์กับ group_extensions
  contact           contacts?         @relation
}

enum ContactType {
  INTERNAL      // contact ภายใน (อาจเป็นพนักงาน)
  EXTERNAL      // contact ภายนอก (ลูกค้า, เบอร์โทรอื่นๆ)
}

model contacts {
  contact_id    String      @id @default(uuid()) @db.Uuid     // รหัส contact (Primary Key)
  domain_id     String   @db.Uuid                           // รหัส domain
  full_name     String                                         // ชื่อเต็ม contact
  phone_number  String?                                        // เบอร์โทรศัพท์ (ไม่บังคับ)
  contact_type ContactType @default(EXTERNAL)                  // ประเภท contact: INTERNAL หรือ EXTERNAL
  extension_id  String?    @db.Uuid @unique                    // รหัส extension ที่ contact นี้ผูกกับ (ถ้ามี) ต้องไม่ซ้ำ (one-to-one)
  
  extension     extensions? @relation(fields: [extension_id], references: [extension_id], onDelete: SetNull) // ความสัมพันธ์กับ extension
  domain            domains           @relation(fields: [domain_id], references: [domains_id], onDelete: Cascade)
  created_at    DateTime    @default(now())                    // วันที่สร้าง contact
  updated_at    DateTime    @default(now())                    // วันที่อัปเดต contact ล่าสุด
}

model group_extensions {
  group_id     String   @id @default(uuid()) @db.Uuid          // รหัสกลุ่ม
  domain_id    String   @db.Uuid                               // รหัส domain ที่กลุ่มนี้อยู่
  name         String                                           // ชื่อกลุ่ม เช่น "IT", "Accounting"
  description  String?                                          // คำอธิบายกลุ่ม
  is_active    Boolean  @default(true)                          // เปิด/ปิดใช้งานกลุ่ม
  created_at   DateTime @default(now())                         // วันที่สร้าง
  updated_at   DateTime @default(now())                         // วันที่อัปเดตล่าสุด

  domain       domains           @relation(fields: [domain_id], references: [domains_id], onDelete: Cascade)
  extensions   extensions[]      // ✅ ความสัมพันธ์แบบ one-to-many: กลุ่มมีหลาย extension
}



/// ข้อมูลการเชื่อมต่อ Trunk (เช่น SIP Trunk) สำหรับโทรเข้า/ออก
model trunks {
  trunk_id         String       @id @default(uuid()) @db.Uuid  // Primary key รหัส trunk แบบ UUID
  domain_id        String       @db.Uuid                        // FK: เชื่อมกับ domain ที่ trunk นี้เป็นของ
  name             String                                       // ชื่อ trunk เช่น "Trunk TOT", "GSM Gateway"
  transport        Transporttype @default(UDP)                   // วิธีส่งข้อมูลของ SIP เช่น UDP, TCP, TLS

  host             String                                       // IP หรือ hostname ของ SIP Server หรือ Gateway
  port             Int          @default(5060)                  // พอร์ตที่ใช้เชื่อมต่อ (SIP มาตรฐานคือ 5060)

  username         String?                                      // ชื่อบัญชีที่ใช้ register (อาจเป็นเบอร์โทร)
  auth_username    String?                                      // ชื่อที่ใช้สำหรับ authentication (บาง Provider แยกจาก username)
  password         String?                                      // รหัสผ่าน SIP Auth
  register_trunk         Boolean      @default(false)                 // ต้อง register กับปลายทางก่อนใช้ trunk นี้หรือไม่

  trunk_type       TrunkType    @default(Register)                 // ประเภทของ trunk: โทรเข้า/ออก/ทั้งคู่
  is_active        Boolean      @default(true)                  // เปิด/ปิดการใช้งาน trunk
  description      String?                                      // คำอธิบาย trunk เช่น "ใช้กับเบอร์บ้าน TOT"

  created_at       DateTime     @default(now())                 // วันที่สร้าง
  updated_at       DateTime     @default(now())                 // วันที่อัปเดตล่าสุด

  /// ความสัมพันธ์กับ domain
  domain           domains      @relation(fields: [domain_id], references: [domains_id], onDelete: Cascade)
}


/// วิธีส่งข้อมูลในระดับ transport ของ SIP
enum Transporttype {
  UDP     // Default: เบา, เร็ว แต่ไม่มีการรับประกัน
  TCP     // มีความเสถียร, เหมาะกับบางระบบ
  TLS     // เข้ารหัส ปลอดภัย ใช้พอร์ต 5061
  WS      // WebSocket (ใช้กับ WebRTC SIP client)
  WSS     // Secure WebSocket (เข้ารหัส)
}
/// ประเภทการใช้งานของ Trunk
enum TrunkType {
  Register 
  PEER
  ACCOUNT
  WEBRTC
}
